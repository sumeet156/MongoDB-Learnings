    MongoDB CRUD Operations: Insert and Find Documents

    CRUD: Create Read Update Delete

          Lesson 01: Inserting Documents in a MongoDB Collection
                     insertOne() - db.<collection>.insertOne() , db.grades.insertOne()
                          _id field Unique id Auto-generated
                     insertMany() - db.<collection>.insertMany([
                                            <document1>,
                                            <document2>,
                                            <document3>
                                          ])

          Lesson 02: Finding Documents in a MongoDB Collection
                     find() - db.<collection>.find()
                              Ex. use training 
                                -> db.zips.find()
                                
                     $in - The $in operator allows us to select all documents that have a field value equal to any of the values specified in the array.
                           {field: {$eq: <value> }}
                           { field: <value> }
                       ex. db.zips.find({state: "AZ"})
                           db.sales.find({ storeLocation: { $in: ["London", "New York"] } })

                - Use the $eq operator to find documents with a field and value
                - Use the $in operator to select documents equal to the values specified in the array


          Lesson 03: Finding Documents by Using Comparison Operators: <field>: {<operator>: <value>}
                     • $gt(greater than)- Returns documents where the field contains a value greater than the specified value.
                                        db.sales.find({ "item.price":{$gt:50}})

                     • $lt(less than)- db.sales.find({ "item.price":{$lt:50}})

                     • $lte(less than or equal to)- Returns all documents less than or equal to a given number.
                                                  db.sales.find({ "customer.age":{$lte:65}})

                     • $gte(greater than or equal to)- db.sales.find({ "customer.age":{$gte:65}})
                     link: https://www.mongodb.com/docs/manual/reference/operator/query-comparison/


          Lesson 04: Querying on Array Elements in MongoDB
                    - Query arrays in documents: In the following example, "InvestmentFund" is not enclosed in square brackets, so MongoDB returns all documents within the products array that contain the specified value.
                                                 Ex. db.accounts.find({ products: "InvestmentFund"})
               
                    - $elemMatch: { < field>: { $e1emMatch:
                                     { <queryl> ,
                                       <query2> ,
                                     }
                                  }}
                       Use the $elemMatch operator to find all documents that contain the specified subdocument. 
                       For example: b.sales.find({
                                         items: {
                                             $elemMatch: { name: "laptop", price: { $gt: 800 }, quantity: { $gte: 1 } },
                                          },
                                       })
 

          Lesson 05: Finding Documents by Using Logical Operators
                    • $and : Use implicit $and to select documents that match multiple expressions. 
                          ex: db.routes.find({ "airline.name": "Southwest Airlines", stops: { $gte: 1 } })
                             - db.collection.find({<expression> , <expression>})   (or)
                            
                             - db.routes.find({
                                  $and: [
                                      <expression>,
                                      <expression>
                                     ]
                                 })                      


                   • $or : Use the $or operator to select documents that match at least one of the included expressions.
                       ex: db.routes.find({
                               $or: [{ dst_airport: "SEA" }, { src_airport: "SEA" }],
                            })

                   • Use the $and operator to use multiple $or expressions in your query.
                         db.routes.find({
                             $and: [
                                { $or: [{ dst_airport: "SEA" }, { src_airport: "SEA" }] },
                                { $or: [{ "airline.name": "American Airlines" }, { airplane: 320 }] },
                               ]
                            })
                      

       link: for more info go to MongoDb docs - https://www.mongodb.com/docs/manual/reference/operator/query-comparison/








