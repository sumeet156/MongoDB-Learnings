    MongoDB CRUD Operations: Modifying Query Results
             
             Lesson 01: Sorting and Limiting Query Results in MongoDB
                cursor: Pointer to the result set of a query. find() returns a cursor
                cursor methods : Chained to queries
                                 Perform actions on the result set
               Sorting: Use cursor.sort() to return query results in a specified order. Within the parentheses of sort(), 
                        include an object that specifies the field(s) to sort by and the order of the sort. Use 1 for ascending order,
                        and -1 for descending order.

                    Ex. db.collection.find(<query>).sort(<sort>)

                    ex. // Return data on all music companies, sorted alphabetically from A to Z.
                       db.companies.find({ category_code: "music" }).sort({ name: 1 });

                   â€¢ To ensure documents are returned in a consistent order, include a field that contains unique values in the sort.
                    An easy way to do this is to include the _id field in the sort.

                    // Return data on all music companies, sorted alphabetically from A to Z. Ensure consistent sort order
                    db.companies.find({ category_code: "music" }).sort({ name: 1, _id: 1 });

 
                     - cursor.limit() : Use cursor.limit() to specify the maximum number of documents the cursor will return. Within the parentheses of limit(),
                                        specify the maximum number of documents to return.
                         Ex. db.companies.find(<query>).limit(<number>)
                             // Return the three music companies with the highest number of employees. Ensure consistent sort order.
                                db.companies
                                     .find({ category_code: "music" })
                                     .sort({ number_of_employees: -1, _id: 1 })
                                     .limit(3);

             Lesson 02: Returning Specific Data from a Query in MongoDB: To specify fields to include or exclude in the result set, add a projection document as the second parameter in the call to db.collection.find()

                       - Projection: Selecting fields to return in our result. db.collection.find(<query> , <projection>)
                             Inclusion & exclusion statements can't be combined in projections. _id field is an exception
                                - Include: db.collection.find(<query>, { <field>:l, <field>:l} )
                                   // Return all restaurant inspections - business name, result, and _id fields only
                                      db.inspections.find(
                                      { sector: "Restaurant - 818" },
                                      { business_name: 1, result: 1 }
                                     )     

                                - Exclude: db.collection.find(<query>, { <field>:0, <field>:0} )
                                    // Return all inspections with result of "Pass" or "Warning" - exclude date and zip code
                                      db.inspections.find(
                                      { result: { $in: ["Pass", "Warning"] } },
                                      { date: 0, "address.zip": 0 }
                                     )
        
                                - While the _id field is included by default, it can be suppressed by setting its value to 0 in any projection.
                                    // Return all restaurant inspections - business name and result fields only
                                       db.inspections.find(
                                       { sector: "Restaurant - 818" },
                                       { business_name: 1, result: 1, _id: 0 }
                                      )

                     Ex.       db.sales.find({ "customer.age": { $lt: 30 }, "customer.satisfaction": { $gt: 3 }, }, { "customer.satisfaction": 1, "customer.age": 1, "storeLocation": 1, "saleDate": 1, "_id": 0, });
                               db.sales.find({ storeLocation: { $in: ["Seattle", "New York"] }, }, { couponUsed: 0, purchaseMethod: 0, customer: 0, })


             Lesson 3: Counting Documents in a MongoDB Collection : Use db.collection.countDocuments() to count the number of documents that match a query. countDocuments() takes two parameters: a query document and an options document.
                     - count Documents: db.collection.countDocuments(,<query>, <options>) 
                              Ex. // Count number of docs in trip collection
                                     db.trips.countDocuments({})
                                 // Count number of trips over 120 minutes by subscribers
                                     db.trips.countDocuments({ tripduration: { $gt: 120 }, usertype: "Subscriber" })           
                                        







