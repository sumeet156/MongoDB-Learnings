  MongoDB CRUD Operations: Replace and Delete Documents
   
        Lesson 01: Replacing a Document in MongoDB
                - replaceOne() : db.collection.replaceOne(filter,replacement,options)
                              • To replace documents in MongoDB, we use the replaceOne() method. The replaceOne() method takes the following parameters:

                                   filter: A query that matches the document to replace.
                                   replacement: The new document to replace the old one with.
                                   options: An object that specifies options for the update.
                                Ex. db.books.replaceOne(_id: ObjectId("6474anjhh74bc80"),} )
                                    
                                    db.birds.findOne({ common_name: "Northern Cardinal" })
                                  -> db.birds.replaceOne(
                                       { _id: ObjectId("6286809e2f3fa87b7d86dccd") },
                                         {
                                            common_name: "Morning Dove",
                                            scientific_name: "Zenaida macroura",
                                            wingspan_cm: 37.23,
                                            habitat: ["urban areas", "farms", "grassland"],
                                            diet: ["seeds"],
                                         }
                                        )            
                    

        Lesson 02: Updating MongoDB Documents by Using updateOne()
                   - updateOne() : The updateOne() method accepts a filter document, an update document, and an optional options object. MongoDB provides update operators and options to help you update documents.
                   In this section, we'll cover three of them: $set, upsert, and $push.

                - Update operators: • $set - The $set operator replaces the value of a field with the specified value, as shown in the following code:
                   db.podcasts.updateOne(
                   {
                     _id: ObjectId("5e8f8f8f8f8f8f8f8f8f8f8"),
                    },

                   {
                       $set: {
                        subscribers: 98562,
                              },
                    } 
                 )           

                                   • upsert:The upsert option creates a new document if no documents match the filtered criteria. (koi new doc. ya phir new field jo doc me nahi hai insert karne ko use karte hai)
                  db.podcasts.updateOne(
                  { title: "The Developer Hub" },
                  { $set: { topics: ["databases", "MongoDB"] } },
                  { upsert: true }
                  )

                                   • $push: The $push operator adds a new value to the hosts array field.
                  db.podcasts.updateOne(
                  { _id: ObjectId("5e8f8f8f8f8f8f8f8f8f8f8") },
                  { $push: { hosts: "Nic Raboy" } }
                  )
                          

        Lesson 03: Updating MongoDB Documents by Using findAndModify()
                 - How and when to use findAndModify() 
                 - How findAndModify() is different from updateOne() 
                 - findAndModify() : Returns the document that has just been updated
                          The findAndModify() method is used to find and replace a single document in MongoDB. It accepts a filter document, a replacement document, and an optional options object.
                       Ex.  db.podcasts.findAndModify({
                                query: { _id: ObjectId("6261a92dfee1ff300dc80bf1") },
                                update: { $inc: { subscribers: 1 } },
                                new: true,
                               })


        Lesson 04: Updating MongoDB Documents by Using updateMany()
                 - updateMany() : To update multiple documents, use the updateMany() method. This method accepts a filter document, an update document, and an optional options object.
                        ex. db.books.updateMany(
                             { publishedDate: { $lt: new Date("2019-01-01") } },
                             { $set: { status: "LEGACY" } } )
                        
                      ex. -> db.collection.updateMany(filter, update, [options])
                          -> db.birds.updateMany(
                             {
                               common_name: {
                                  $in: ["Blue Jay", "Grackle"],
                             },
                             },
                              {
                                  $set: {
                                     last_seen: ISODate("2022-01-01"), 
                              }, } )

        Lesson 05: Deleting Documents in MongoDB: To delete documents, use the deleteOne() or deleteMany() methods. Both methods accept a filter document and an options object.
                - deleteOne() : db.podcasts.deleteOne({ _id: Objectid("6282c9862acb966e76bbf20a") })
                - deleteMany() : db.podcasts.deleteMany({category: “crime”})


Replaced a single document by using db.collection.replaceOne().
Updated a field value by using the $set update operator in db.collection.updateOne().
Added a value to an array by using the $push update operator in db.collection.updateOne().
Added a new field value to a document by using the upsert option in db.collection.updateOne().
Found and modified a document by using db.collection.findAndModify().
Updated multiple documents by using db.collection.updateMany().
Deleted a document by using db.collection.deleteOne().

